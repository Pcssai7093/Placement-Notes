Python is a high level, interpreted, dynamically typed and strongly typed language
python support multiple paradigms of programming

python builtin data types:

1. numeric data types
int
float
bool
complex

2. sequence data types
list
tuple
str
range

3. mapping data types
map

4. set data types
set
frozenset (immutable set)

** pass in python represents a null operations

** implicit type casting happens in python during arithmatic computation of different numberical types
example: 1*1.01 give a float

**
python is operator compares the identity of values or variable
a is b(compares the identity of a with b)


********
In Python, "interning" is an optimization technique used to store and reuse immutable objects (such as small integers, strings, and some other types) to save memory and improve performance. Interning is achieved by storing these objects in a cache so that when you create a new object with the same value, Python can reuse the existing object from the cache rather than creating a new one.

variables with same values point to same memory location at the start of the program to save memory when update they will be assigned different memory location

example:
a=123123123121212
b=123123123121212
print(id(a),id(b))
b+=1
print(id(a),id(b))
print(a,b)


output
-----------
139661619620144 139661619620144
139661619620144 139661619749216
123123123121212 123123123121213

*****
The difference between import and from import in Python is:

import imports an entire code library.
from import imports a specific member or members of the library.

******
from math import sqrt, floor


**
Exception handling in python


try:

except:  (can catch specific exception   ex:  except Exemption_name as e  )

else:

executes if no exception

finally:

execute at end always

as cleanup funtion

-------------------------

** raising and catching custom exceptions

try:
    raise Exception("Sorry, no numbers below zero")
except Exception as e:
    print(e)


*** Exception is type class


-----------------------------------------

** del keyword

delete objects are values in sequence data types

a=[1,2,3,4]
del a[0]
print(a)

output:
[2, 3, 4]


--------------------------------------------------------

** immutable objects are hashable in python
only hashable objects can be put in python states
List are not hashable in python but tuples are hashable


------------------------------------------------------

shallow copying vs deep copying in python

shallow copying : copy the references of the objects

deep copy: create a new object with same value

!! Note: This effect only seen with copy method when arrays have nested arrays or objects

Example::

a=[[1,2],3,4]
b=[*a]
c=a.copy()
print(a,b,c)
a[0][0]=5
print(a,b,c)

Output:
[[1, 2], 3, 4] [[1, 2], 3, 4] [[1, 2], 3, 4]
[[5, 2], 3, 4] [[5, 2], 3, 4] [[5, 2], 3, 4]


Python * operator also do shallow copy
----------------------------------------------------------

Lists in python
-> sequence data type
-> mutable
-> hashable
-> indexed
-> ordered
-> can have different data type objects in same list 

methods
Let x be the list
-> x.insert(index,value)
-> x.append(value)
-> x.extend(other_list)
-> x.copy()
-> x.sort()
-> x.index() (raise exception if value not in list)
-> value in x
-> x.pop(index_to_remove_default_-1)
-> x.clear() // empties list
-> x.count(value) // return the frequency of value
-> x.remove(value) // remove first item with the specified value
-> x=x+x

--------------------------------------------------------------

Tuples in python
-> sequence data type
-> immutable
-> indexed
-> hashable
-> ordered
-> elements in the tuple cannot be modified

methods
let t be the tuple
-> t.count(value)
-> t.index(value)
-> value in t
-> ordered
-> t+t

--------------------------------------------------------------

Sets in Python
-> mutable
-> not hashable
-> not indexed
-> unordered
-> elements can be modified

methods
-> s.add(value)
-> s+s
-> s.remove(value)
-> s.clear()
-> s.copy()
-> s.pop() // remove random element from set
-> s.intersection(set1,set....,etc)
-> s.intersection_update(set1,set....,etc)
-> s.difference(set1,set....,etc)
-> s.difference_update(set1,set....,etc)
-> s.issubset(set2)
-> s.issuperset(set2)
-> s.isdisjoint(set2)
-> s.union(set1,set....,etc)
-> s.update(set1,set....,etc)

Set operators
-> | s1|s2 // union
-> + intersection
-> - difference
-> ^ union-intersection (symmetric difference)

-----------------------------------------------------

Python list comprehensions

Sytax
[expression for item in iterable if condition == True]
Examples:
d={k:0 for k in range(10)}
print(d)
a=[k for k in range(10) if(k%2==0)]
print(a)

** list comprehensions can be used in sets,list and dictionaries

-----------------------------------------------------------
IMp methods
ord(character_Value) // returns the ascii value
chr(ascii_number) // returns character for that ascii

-----------------------------------------------------------

python strings
-> immutable
-> hashable
-> sequence data typed
-> indexed

****  multiline strings
a = ''' Hello
       World!
       This is a
       Multiline String.'''
       
print(a)
Output:
Hello
World!
This is a
Multiline String.


*** String format
b=10
print(f"value of b is {b}")
Output
value of b is 10

string methods
let str be string
-> str.capitalize()
-> str.casefold() // to lowercase
-> str.upper()
-> str.lower()
-> str.isupper() // check all the characters in a string are uppercase
-> str.islower()
-> str.split(separator, maxsplit)
-> str.rsplit(separator, maxsplit) // start splitting from right
-> "delimeter".join(*strings...)
-> str=str+str
-> str.index(CHARACTER/STRING) // find the index of the string else throws exception
-> "str_value" in str
->  ** str.find("STRING") // returns the first index of STRING in str if not returns -1
-> str.format(values,...) // format the specified values in a string
Examples:
txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36)
txt2 = "My name is {0}, I'm {1}".format("John",36)
txt3 = "My name is {}, I'm {}".format("John",36)
-> isalpha()
-> isdecimal()
-> isdigit()
-> ** str.strip(string_of_chars_that_need_to_be_strped)
example:
print("...rtx".strip("r."))
removes 'r' and '.' from ends
-> str.lstrip()
-> str.rstrip()
-> str.startswith("match")
-> str.endswith("match")
-> str.partition()
Example:
Search for the word "bananas", and return a tuple with three elements:

1 - everything before the "match"
2 - the "match"
3 - everything after the "match"

txt = "I could eat bananas all day"

x = txt.partition("bananas")
print(x)
-> str.replace(old,new)
-> str.rfind() // search from right return first right
-> str.rpartion()
-> str.swapcase()



-------------------------------------------------------
inheritance of attributes python
class p:
    n="he"
    def __init__(self,name):
        self.name=name
    def display(self):
        print(self.name)
        
class c(p):
    
    def __init__(self,name,age):
        super().__init__(name)
        self.age=age
        
    def display(self):
        print(self.age,end=" ")
        super().display()

o1=p("raja")
o2=c("ramu",10)
o2.display()
# o1.display()
print(p.n)

output:
-------
10 ramu
he
-------------------------------------------------------

Python checking type of variable

string
1. if s is the string
if(type(s)==str)
2. integers
if(type(num)==int)




-------------------------------------------------------

*****
Asserts in Python

// meaning of assert: state is a confident manner
// assert in python check a condition if condition fails throws error

1. asserts without message
a=0
assert a!=0
output:
AssertionError

2. asserts with message
a=0
assert a!=0,"value of a is zero"
output:
AssertionError: value of a is zero

-----------------------------------------------------------------

python regex

methods:
import re

-> re.compile()  // to create 
-> re.match(pattern,string,flags) // find a match from the start can be a substring
-> re.fullmatch(pattern,string,flags) // whole string should satisfy the pattern
-> re.split(patter,string,maxsplit,flags)
-> re.sub(pattern,replace_string,org_string,flags)
-> re.search(pattern, string,flags)
-> re.findall(pattern, string,flags)

values of flags argument
flags=
re.I // ignore case
re.M
re.X

** can use multiple flags with syntax : flags = re.I | re.M

----------------------------------------------------------------------

lambda functions in python

area=lambda a,b:a*b

----------------------------------------------------------------------
****
ternary operator in python
// checking the value of x is positive
res=True if x>0 else False

----------------------------------------------------------------------
arbitary number of arguments

def f(*a):
    print(a)
f(11,13)

----------------------------------------------------------------------


Python taking command line arguments *** / need to use sys module
import sys

print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)


----------------------------------------------------------------------
***************
__name__ global variable
contains "__main__" if the python executed as the main program
contains name of the file if the program is executed as module



******

----------------------------------------------------------------------

Python sort,sorted

sort only for list and do inplace
sorted used for most iterables returns a new object (can be used with strings)

a=[1,1,2,3,3,-2,23,2]
a.sort(key=lambda x:-x,reverse=False)
na=sorted(a,key=lambda x:-x,reverse=False)
print(a)
print(na)

output
[23, 3, 3, 2, 2, 1, 1, -2]
[23, 3, 3, 2, 2, 1, 1, -2]

----------------------------------------------------------------------
Python collections
The collection Module in Python provides different types of containers. A Container is an object that is used to store different objects and provide a way to access the contained objects and iterate over them. Some of the built-in containers are Tuple, List, Dictionary, etc. In this article, we will discuss the different containers provided by the collections module.

containers or classes in python collections
   Counters
   OrderedDict
   DefaultDict
   ChainMap
   NamedTuple
   DeQue
   UserDict
   UserList
   UserString
----------------------------------------------------------------------
*****

Python heapq module


import heapq
a=[1,3...]
hp=heapq.heapify(a)
heapq.heappush(hp,elem)
heapq.pop(hp)


Note: if you want have maxheap make elements negative as heapq by default is min-heap
----------------------------------------------------------------------




